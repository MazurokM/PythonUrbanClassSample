class Bilding:
  def __init__(self, floors: int, square: int, height: int):
    """
    Создание и подготовка к работе объекта "Здание"
    :param nfloors: Этажность
		:param square: Площадь
    :param height: Высота
		"""
    self.floors = floors
    self.square = square
    self.height = height

  def is_bilding(self) -> bool:
    """
		Проверка заданных параметров здания.

    Аргументы "этажность", "площадь", "высота" должны быть положительными числами.

    :retern: Является ли объект зданием
		"""
    ...

  def get_construction_volume(self) -> int:
    """
		Вычисление строительного объема здания.

    :param square: Площадь
    :param height: Высота

    :retern: Строительный объем здания
		"""
    ...

  def get_height(self) -> int:
    """
		Добавления высотности здания.

    :param height: Высота

    :retern: Новое значение высотности здания
		"""
    ...

bilding_1 = Bilding(5, 122, 16)

print(bilding_1.floors)


class Hair:
  def __init__(self, leght: int, color: str, dencity: str):
  """
  Создание и подготовка к работе объекта "Волосы"
  :param leght: Длина волос 
  :param color: Цвет волос
  :param dencity: Густота волос
  """

  self.leght = leght
  self.color = color
  self.dencity = dencity

  def is_hair(self) -> bool:
    """
    Проверка атрибутов на соответствие требованиям.

    Атрибут "Длина" должен быть положительным числом,
    атрибуты "Цвет волос" и "Густота волос" должны быть не пустой строкой

    :param leght: Длина волос 
    :param color: Цвет волос
    :param dencity: Густота волос
    :retern: Корректны ли данные, является ли объект волосами
    """ 
...

  def cut_off(self) -> int:
    """
    Отрезаем часть волос.
  
    Если отрезаемая часть больше, чем первоначальная длина,
    то возвращает ошибку. 

    :param leght: Длина волос 

    :retern: Новую длину волос
    """ 
  ...

  def paint(self) -> str:
    """
    Окрашиваем волосы. 

    :param color: Цвет волос 

    :retern: Новый цвет волос
    """ 
  ...
  
  
  class Cheese:
  def __init__(self, expiration_date: int, holes: int, weight: int):
    """
    Создание и подготовка к работе объекта "Сыр"
    :param expiration_date: Срок годности
		:param holes: Колличество дырок в сыре
    :param weight: Масса сыра
    """

    self.expiration_date = expiration_date
    self.holes = holes
    self.weight = weight

  def is_cheese(self) -> bool:
    """
		Проверка заданных параметров сыра.

    Аргументы "Колличество дырок в сыре", "Масса сыра" должны быть положительными числами.

    :retern: Является ли объект зданием
		"""
    ...
  def expiration_date_check(self) -> bool:
    """
		Проверка истечения срока годности сыра.

    Если "Срок годности" отрицательное число,
    то возвращается "продук нельзя употреблять"

    :param expiration_date: Срок годности
    :retern: Истек ли срок годности
		"""
    ...

  def cut_a_piece(self) -> int:
    """
		Отрезаем кусок от сыра.

    Если масса отрезаемого куска больше массы самого сыра,
    то возвращается "ошибка"

    :param weight: Масса сыра
    :retern: Масса сыра после отрезания куска
		"""
    ...
